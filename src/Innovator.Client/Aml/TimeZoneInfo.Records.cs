#if !TIMEZONEINFO
using System;
using System.Collections.Generic;

namespace Innovator.Client.Time
{
  internal sealed partial class TimeZoneInfo
  {
    private static Dictionary<string, TimeZoneInfo> _cache = new Dictionary<string, TimeZoneInfo>(StringComparer.OrdinalIgnoreCase)
    {
      { "Dateline Standard Time", TimeZoneInfo.CreateCustomTimeZone("Dateline Standard Time", TimeSpan.FromSeconds(-43200), "(UTC-12:00) International Date Line West", "Dateline Standard Time", "Dateline Daylight Time", new AdjustmentRule [] {
      }, true) },
      { "UTC-11", TimeZoneInfo.CreateCustomTimeZone("UTC-11", TimeSpan.FromSeconds(-39600), "(UTC-11:00) Coordinated Universal Time-11", "UTC-11", "UTC-11", new AdjustmentRule [] {
      }, true) },
      { "Aleutian Standard Time", TimeZoneInfo.CreateCustomTimeZone("Aleutian Standard Time", TimeSpan.FromSeconds(-36000), "(UTC-10:00) Aleutian Islands", "Aleutian Standard Time", "Aleutian Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2006, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 4, 1, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2007, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(9999, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 2, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 11, 1, DayOfWeek.Sunday)),
      }, false) },
      { "Hawaiian Standard Time", TimeZoneInfo.CreateCustomTimeZone("Hawaiian Standard Time", TimeSpan.FromSeconds(-36000), "(UTC-10:00) Hawaii", "Hawaiian Standard Time", "Hawaiian Daylight Time", new AdjustmentRule [] {
      }, true) },
      { "Marquesas Standard Time", TimeZoneInfo.CreateCustomTimeZone("Marquesas Standard Time", TimeSpan.FromSeconds(-34200), "(UTC-09:30) Marquesas Islands", "Marquesas Standard Time", "Marquesas Daylight Time", new AdjustmentRule [] {
      }, true) },
      { "Alaskan Standard Time", TimeZoneInfo.CreateCustomTimeZone("Alaskan Standard Time", TimeSpan.FromSeconds(-32400), "(UTC-09:00) Alaska", "Alaskan Standard Time", "Alaskan Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2006, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 4, 1, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2007, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(9999, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 2, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 11, 1, DayOfWeek.Sunday)),
      }, false) },
      { "UTC-09", TimeZoneInfo.CreateCustomTimeZone("UTC-09", TimeSpan.FromSeconds(-32400), "(UTC-09:00) Coordinated Universal Time-09", "UTC-09", "UTC-09", new AdjustmentRule [] {
      }, true) },
      { "Pacific Standard Time (Mexico)", TimeZoneInfo.CreateCustomTimeZone("Pacific Standard Time (Mexico)", TimeSpan.FromSeconds(-28800), "(UTC-08:00) Baja California", "Pacific Standard Time (Mexico)", "Pacific Daylight Time (Mexico)", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2009, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 4, 1, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2010, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(9999, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 2, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 11, 1, DayOfWeek.Sunday)),
      }, false) },
      { "UTC-08", TimeZoneInfo.CreateCustomTimeZone("UTC-08", TimeSpan.FromSeconds(-28800), "(UTC-08:00) Coordinated Universal Time-08", "UTC-08", "UTC-08", new AdjustmentRule [] {
      }, true) },
      { "Pacific Standard Time", TimeZoneInfo.CreateCustomTimeZone("Pacific Standard Time", TimeSpan.FromSeconds(-28800), "(UTC-08:00) Pacific Time (US & Canada)", "Pacific Standard Time", "Pacific Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2006, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 4, 1, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2007, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(9999, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 2, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 11, 1, DayOfWeek.Sunday)),
      }, false) },
      { "US Mountain Standard Time", TimeZoneInfo.CreateCustomTimeZone("US Mountain Standard Time", TimeSpan.FromSeconds(-25200), "(UTC-07:00) Arizona", "US Mountain Standard Time", "US Mountain Daylight Time", new AdjustmentRule [] {
      }, true) },
      { "Mountain Standard Time (Mexico)", TimeZoneInfo.CreateCustomTimeZone("Mountain Standard Time (Mexico)", TimeSpan.FromSeconds(-25200), "(UTC-07:00) Chihuahua, La Paz, Mazatlan", "Mountain Standard Time (Mexico)", "Mountain Daylight Time (Mexico)", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(9999, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 4, 1, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday)),
      }, false) },
      { "Mountain Standard Time", TimeZoneInfo.CreateCustomTimeZone("Mountain Standard Time", TimeSpan.FromSeconds(-25200), "(UTC-07:00) Mountain Time (US & Canada)", "Mountain Standard Time", "Mountain Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2006, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 4, 1, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2007, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(9999, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 2, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 11, 1, DayOfWeek.Sunday)),
      }, false) },
      { "Yukon Standard Time", TimeZoneInfo.CreateCustomTimeZone("Yukon Standard Time", TimeSpan.FromSeconds(-25200), "(UTC-07:00) Yukon", "Yukon Standard Time", "Yukon Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2006, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 4, 1, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday), TimeSpan.FromSeconds(-3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2007, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2007, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 2, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 11, 1, DayOfWeek.Sunday), TimeSpan.FromSeconds(-3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2008, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2008, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 2, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 11, 1, DayOfWeek.Sunday), TimeSpan.FromSeconds(-3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2009, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2009, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 2, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 11, 1, DayOfWeek.Sunday), TimeSpan.FromSeconds(-3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2010, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2010, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 2, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 11, 1, DayOfWeek.Sunday), TimeSpan.FromSeconds(-3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2011, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2011, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 2, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 11, 1, DayOfWeek.Sunday), TimeSpan.FromSeconds(-3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2012, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2012, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 2, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 11, 1, DayOfWeek.Sunday), TimeSpan.FromSeconds(-3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2013, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2013, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 2, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 11, 1, DayOfWeek.Sunday), TimeSpan.FromSeconds(-3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2014, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2014, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 2, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 11, 1, DayOfWeek.Sunday), TimeSpan.FromSeconds(-3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2015, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2015, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 2, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 11, 1, DayOfWeek.Sunday), TimeSpan.FromSeconds(-3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2016, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2016, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 2, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 11, 1, DayOfWeek.Sunday), TimeSpan.FromSeconds(-3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2017, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2017, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 2, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 11, 1, DayOfWeek.Sunday), TimeSpan.FromSeconds(-3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2018, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2018, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 2, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 11, 1, DayOfWeek.Sunday), TimeSpan.FromSeconds(-3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2019, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2019, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 2, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 11, 1, DayOfWeek.Sunday), TimeSpan.FromSeconds(-3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2020, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2020, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 2, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Wednesday), TimeSpan.FromSeconds(-3600)),
      }, false) },
      { "Central America Standard Time", TimeZoneInfo.CreateCustomTimeZone("Central America Standard Time", TimeSpan.FromSeconds(-21600), "(UTC-06:00) Central America", "Central America Standard Time", "Central America Daylight Time", new AdjustmentRule [] {
      }, true) },
      { "Central Standard Time", TimeZoneInfo.CreateCustomTimeZone("Central Standard Time", TimeSpan.FromSeconds(-21600), "(UTC-06:00) Central Time (US & Canada)", "Central Standard Time", "Central Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2006, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 4, 1, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2007, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(9999, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 2, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 11, 1, DayOfWeek.Sunday)),
      }, false) },
      { "Easter Island Standard Time", TimeZoneInfo.CreateCustomTimeZone("Easter Island Standard Time", TimeSpan.FromSeconds(-21600), "(UTC-06:00) Easter Island", "Easter Island Standard Time", "Easter Island Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2007, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 22, 0, 0, DateTimeKind.Unspecified), 10, 2, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 22, 0, 0, DateTimeKind.Unspecified), 3, 2, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2008, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2008, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 22, 0, 0, DateTimeKind.Unspecified), 10, 2, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 22, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2009, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2009, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 22, 0, 0, DateTimeKind.Unspecified), 10, 2, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 22, 0, 0, DateTimeKind.Unspecified), 3, 2, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2010, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2010, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 22, 0, 0, DateTimeKind.Unspecified), 10, 2, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 22, 0, 0, DateTimeKind.Unspecified), 4, 1, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2011, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2011, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 22, 0, 0, DateTimeKind.Unspecified), 8, 3, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 22, 0, 0, DateTimeKind.Unspecified), 5, 1, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2012, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2012, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 22, 0, 0, DateTimeKind.Unspecified), 9, 1, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 22, 0, 0, DateTimeKind.Unspecified), 4, 5, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2013, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2013, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 22, 0, 0, DateTimeKind.Unspecified), 9, 1, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 22, 0, 0, DateTimeKind.Unspecified), 4, 5, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2014, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2014, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 22, 0, 0, DateTimeKind.Unspecified), 9, 1, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 22, 0, 0, DateTimeKind.Unspecified), 4, 5, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2015, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2015, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(0), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TimeSpan.FromSeconds(3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2016, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2016, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 22, 0, 0, DateTimeKind.Unspecified), 8, 2, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 22, 0, 0, DateTimeKind.Unspecified), 5, 2, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2017, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2017, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 22, 0, 0, DateTimeKind.Unspecified), 8, 2, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 22, 0, 0, DateTimeKind.Unspecified), 5, 2, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2018, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2018, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 22, 0, 0, DateTimeKind.Unspecified), 8, 2, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 22, 0, 0, DateTimeKind.Unspecified), 5, 2, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2019, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(9999, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 22, 0, 0, DateTimeKind.Unspecified), 9, 1, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 22, 0, 0, DateTimeKind.Unspecified), 4, 1, DayOfWeek.Saturday)),
      }, false) },
      { "Central Standard Time (Mexico)", TimeZoneInfo.CreateCustomTimeZone("Central Standard Time (Mexico)", TimeSpan.FromSeconds(-21600), "(UTC-06:00) Guadalajara, Mexico City, Monterrey", "Central Standard Time (Mexico)", "Central Daylight Time (Mexico)", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(9999, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 4, 1, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday)),
      }, false) },
      { "Canada Central Standard Time", TimeZoneInfo.CreateCustomTimeZone("Canada Central Standard Time", TimeSpan.FromSeconds(-21600), "(UTC-06:00) Saskatchewan", "Canada Central Standard Time", "Canada Central Daylight Time", new AdjustmentRule [] {
      }, true) },
      { "SA Pacific Standard Time", TimeZoneInfo.CreateCustomTimeZone("SA Pacific Standard Time", TimeSpan.FromSeconds(-18000), "(UTC-05:00) Bogota, Lima, Quito, Rio Branco", "SA Pacific Standard Time", "SA Pacific Daylight Time", new AdjustmentRule [] {
      }, true) },
      { "Eastern Standard Time (Mexico)", TimeZoneInfo.CreateCustomTimeZone("Eastern Standard Time (Mexico)", TimeSpan.FromSeconds(-18000), "(UTC-05:00) Chetumal", "Eastern Standard Time (Mexico)", "Eastern Daylight Time (Mexico)", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2014, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 4, 1, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday), TimeSpan.FromSeconds(-3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2015, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2015, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 2, 1, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Thursday), TimeSpan.FromSeconds(-3600)),
      }, false) },
      { "Eastern Standard Time", TimeZoneInfo.CreateCustomTimeZone("Eastern Standard Time", TimeSpan.FromSeconds(-18000), "(UTC-05:00) Eastern Time (US & Canada)", "Eastern Standard Time", "Eastern Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2006, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 4, 1, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2007, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(9999, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 2, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 11, 1, DayOfWeek.Sunday)),
      }, false) },
      { "Haiti Standard Time", TimeZoneInfo.CreateCustomTimeZone("Haiti Standard Time", TimeSpan.FromSeconds(-18000), "(UTC-05:00) Haiti", "Haiti Standard Time", "Haiti Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2006, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 4, 1, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2012, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2012, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 2, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 11, 1, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2013, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2013, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 2, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 11, 1, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2014, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2014, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 2, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 11, 1, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2015, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2015, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 2, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 11, 1, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2017, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(9999, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 2, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 11, 1, DayOfWeek.Sunday)),
      }, false) },
      { "Cuba Standard Time", TimeZoneInfo.CreateCustomTimeZone("Cuba Standard Time", TimeSpan.FromSeconds(-18000), "(UTC-05:00) Havana", "Cuba Standard Time", "Cuba Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2003, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 4, 1, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 1, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2004, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2004, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Thursday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2005, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2005, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(0), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TimeSpan.FromSeconds(3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2006, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2006, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 1, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2007, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2007, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 3, 2, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 1, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2008, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2008, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 3, 3, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 1, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2009, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2009, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 3, 2, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 1, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2010, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2010, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 3, 2, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 1, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2011, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2011, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 3, 3, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 1, 0, 0, DateTimeKind.Unspecified), 11, 2, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2012, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2012, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 4, 1, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 1, 0, 0, DateTimeKind.Unspecified), 11, 1, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2013, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(9999, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 3, 2, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 1, 0, 0, DateTimeKind.Unspecified), 11, 1, DayOfWeek.Sunday)),
      }, false) },
      { "US Eastern Standard Time", TimeZoneInfo.CreateCustomTimeZone("US Eastern Standard Time", TimeSpan.FromSeconds(-18000), "(UTC-05:00) Indiana (East)", "US Eastern Standard Time", "US Eastern Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2006, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2006, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 4, 1, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2007, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(9999, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 2, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 11, 1, DayOfWeek.Sunday)),
      }, false) },
      { "Turks And Caicos Standard Time", TimeZoneInfo.CreateCustomTimeZone("Turks And Caicos Standard Time", TimeSpan.FromSeconds(-18000), "(UTC-05:00) Turks and Caicos", "Turks and Caicos Standard Time", "Turks and Caicos Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2014, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 2, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 11, 1, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2015, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2015, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 2, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Thursday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2016, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2016, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(0), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TimeSpan.FromSeconds(3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2017, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2017, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(0), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TimeSpan.FromSeconds(3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2018, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2018, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 2, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 11, 1, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2019, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(9999, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 2, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 11, 1, DayOfWeek.Sunday)),
      }, false) },
      { "Paraguay Standard Time", TimeZoneInfo.CreateCustomTimeZone("Paraguay Standard Time", TimeSpan.FromSeconds(-14400), "(UTC-04:00) Asuncion", "Paraguay Standard Time", "Paraguay Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2008, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 10, 3, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 3, 2, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2009, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2009, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 10, 3, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 3, 1, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2010, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2010, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 10, 1, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 4, 2, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2011, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2011, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 10, 1, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 4, 2, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2012, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2012, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 10, 1, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 4, 1, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2013, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2013, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 10, 1, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 3, 4, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2014, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2014, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 10, 1, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 3, 4, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2015, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2015, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 10, 1, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 3, 3, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2016, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2016, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 10, 1, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2017, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2017, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 9, 5, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2018, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2018, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 10, 1, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 3, 4, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2019, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2019, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 10, 1, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 3, 4, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2020, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2020, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 10, 1, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 3, 3, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2021, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(9999, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 10, 1, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Saturday)),
      }, false) },
      { "Atlantic Standard Time", TimeZoneInfo.CreateCustomTimeZone("Atlantic Standard Time", TimeSpan.FromSeconds(-14400), "(UTC-04:00) Atlantic Time (Canada)", "Atlantic Standard Time", "Atlantic Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2006, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 4, 1, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2007, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(9999, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 2, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 11, 1, DayOfWeek.Sunday)),
      }, false) },
      { "Venezuela Standard Time", TimeZoneInfo.CreateCustomTimeZone("Venezuela Standard Time", TimeSpan.FromSeconds(-14400), "(UTC-04:00) Caracas", "Venezuela Standard Time", "Venezuela Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2007, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2007, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(1800), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Monday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 12, 2, DayOfWeek.Sunday), TimeSpan.FromSeconds(-1800)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2008, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2008, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(0), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TimeSpan.FromSeconds(-1800)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2009, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2009, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(0), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TimeSpan.FromSeconds(-1800)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2010, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2010, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(0), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TimeSpan.FromSeconds(-1800)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2011, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2011, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(0), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TimeSpan.FromSeconds(-1800)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2012, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2012, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(0), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TimeSpan.FromSeconds(-1800)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2013, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2013, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(0), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TimeSpan.FromSeconds(-1800)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2014, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2014, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(0), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TimeSpan.FromSeconds(-1800)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2015, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2015, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(0), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TimeSpan.FromSeconds(-1800)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2016, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2016, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(-1800), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Friday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 30, 0, DateTimeKind.Unspecified), 5, 1, DayOfWeek.Sunday)),
      }, false) },
      { "Central Brazilian Standard Time", TimeZoneInfo.CreateCustomTimeZone("Central Brazilian Standard Time", TimeSpan.FromSeconds(-14400), "(UTC-04:00) Cuiaba", "Central Brazilian Standard Time", "Central Brazilian Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2004, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 11, 1, DayOfWeek.Tuesday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Thursday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2005, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2005, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 10, 3, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 2, 3, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2006, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2006, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 11, 1, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 2, 3, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2007, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2007, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 10, 2, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 2, 5, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2008, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2008, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 10, 3, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 2, 3, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2009, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2009, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 10, 3, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 2, 2, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2010, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2010, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 10, 3, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 2, 3, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2011, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2011, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 10, 3, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 2, 3, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2012, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2012, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 10, 3, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 2, 4, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2013, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2013, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 10, 3, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 2, 3, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2014, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2014, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 10, 3, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 2, 3, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2015, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2015, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 10, 3, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 2, 3, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2016, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2016, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 10, 3, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 2, 3, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2017, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2017, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 10, 2, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 2, 3, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2018, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2018, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 11, 1, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 2, 3, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2019, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2019, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Tuesday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 2, 3, DayOfWeek.Sunday)),
      }, false) },
      { "SA Western Standard Time", TimeZoneInfo.CreateCustomTimeZone("SA Western Standard Time", TimeSpan.FromSeconds(-14400), "(UTC-04:00) Georgetown, La Paz, Manaus, San Juan", "SA Western Standard Time", "SA Western Daylight Time", new AdjustmentRule [] {
      }, true) },
      { "Pacific SA Standard Time", TimeZoneInfo.CreateCustomTimeZone("Pacific SA Standard Time", TimeSpan.FromSeconds(-14400), "(UTC-04:00) Santiago", "Pacific SA Standard Time", "Pacific SA Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2007, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 10, 2, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 3, 2, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2008, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2008, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 10, 2, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2009, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2009, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 10, 2, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 3, 2, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2010, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2010, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 10, 2, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 4, 1, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2011, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2011, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 8, 3, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 5, 1, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2012, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2012, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 9, 1, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 4, 5, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2013, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2013, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 9, 1, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 4, 5, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2014, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2014, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 9, 1, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 4, 5, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2015, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2015, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(0), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TimeSpan.FromSeconds(3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2016, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2016, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 8, 2, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 5, 2, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2017, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2017, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 8, 2, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 5, 2, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2018, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2018, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 8, 2, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 5, 2, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2019, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(9999, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 9, 1, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 4, 1, DayOfWeek.Saturday)),
      }, false) },
      { "Newfoundland Standard Time", TimeZoneInfo.CreateCustomTimeZone("Newfoundland Standard Time", TimeSpan.FromSeconds(-12600), "(UTC-03:30) Newfoundland", "Newfoundland Standard Time", "Newfoundland Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2006, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 1, 0, DateTimeKind.Unspecified), 4, 1, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 1, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2007, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2007, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 1, 0, DateTimeKind.Unspecified), 3, 2, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 1, 0, DateTimeKind.Unspecified), 11, 1, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2008, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2008, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 1, 0, DateTimeKind.Unspecified), 3, 2, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 1, 0, DateTimeKind.Unspecified), 11, 1, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2009, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2009, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 1, 0, DateTimeKind.Unspecified), 3, 2, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 1, 0, DateTimeKind.Unspecified), 11, 1, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2010, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2010, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 1, 0, DateTimeKind.Unspecified), 3, 2, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 1, 0, DateTimeKind.Unspecified), 11, 1, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2011, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2011, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 1, 0, DateTimeKind.Unspecified), 3, 2, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 11, 1, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2012, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(9999, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 2, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 11, 1, DayOfWeek.Sunday)),
      }, false) },
      { "Tocantins Standard Time", TimeZoneInfo.CreateCustomTimeZone("Tocantins Standard Time", TimeSpan.FromSeconds(-10800), "(UTC-03:00) Araguaina", "Tocantins Standard Time", "Tocantins Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2012, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2012, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 10, 3, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2013, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2013, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Tuesday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 2, 3, DayOfWeek.Saturday)),
      }, false) },
      { "E. South America Standard Time", TimeZoneInfo.CreateCustomTimeZone("E. South America Standard Time", TimeSpan.FromSeconds(-10800), "(UTC-03:00) Brasilia", "E. South America Standard Time", "E. South America Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2004, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 11, 1, DayOfWeek.Tuesday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 2, 2, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2005, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2005, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 10, 3, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 2, 3, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2006, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2006, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 11, 1, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 2, 3, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2007, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2007, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 10, 2, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 2, 5, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2008, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2008, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 10, 3, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 2, 3, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2009, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2009, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 10, 3, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 2, 2, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2010, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2010, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 10, 3, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 2, 3, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2011, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2011, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 10, 3, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 2, 3, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2012, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2012, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 10, 3, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 2, 4, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2013, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2013, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 10, 3, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 2, 3, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2014, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2014, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 10, 3, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 2, 3, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2015, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2015, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 10, 3, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 2, 3, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2016, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2016, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 10, 3, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 2, 3, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2017, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2017, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 10, 2, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 2, 3, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2018, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2018, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 11, 1, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 2, 3, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2019, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2019, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Tuesday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 2, 3, DayOfWeek.Sunday)),
      }, false) },
      { "SA Eastern Standard Time", TimeZoneInfo.CreateCustomTimeZone("SA Eastern Standard Time", TimeSpan.FromSeconds(-10800), "(UTC-03:00) Cayenne, Fortaleza", "SA Eastern Standard Time", "SA Eastern Daylight Time", new AdjustmentRule [] {
      }, true) },
      { "Argentina Standard Time", TimeZoneInfo.CreateCustomTimeZone("Argentina Standard Time", TimeSpan.FromSeconds(-10800), "(UTC-03:00) City of Buenos Aires", "Argentina Standard Time", "Argentina Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2007, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2007, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 12, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Monday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2008, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2008, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 10, 3, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 3, 3, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2009, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2009, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Thursday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 3, 2, DayOfWeek.Saturday)),
      }, false) },
      { "Greenland Standard Time", TimeZoneInfo.CreateCustomTimeZone("Greenland Standard Time", TimeSpan.FromSeconds(-10800), "(UTC-03:00) Greenland", "Greenland Standard Time", "Greenland Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2004, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 22, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2005, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2005, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 22, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2006, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2006, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 22, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2007, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2007, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 22, 0, 0, DateTimeKind.Unspecified), 3, 4, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2008, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2008, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 22, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2009, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2009, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 22, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 0, 0, DateTimeKind.Unspecified), 10, 4, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2010, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2010, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 22, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2011, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2011, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 22, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2012, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2012, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 22, 0, 0, DateTimeKind.Unspecified), 3, 4, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2013, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2013, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 22, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2014, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2014, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 22, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2015, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2015, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 22, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 0, 0, DateTimeKind.Unspecified), 10, 4, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2016, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2016, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 22, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2017, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2017, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 22, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2018, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2018, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 22, 0, 0, DateTimeKind.Unspecified), 3, 4, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2019, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2019, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 22, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2020, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2020, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 22, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 0, 0, DateTimeKind.Unspecified), 10, 4, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2021, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(9999, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 22, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Saturday)),
      }, false) },
      { "Montevideo Standard Time", TimeZoneInfo.CreateCustomTimeZone("Montevideo Standard Time", TimeSpan.FromSeconds(-10800), "(UTC-03:00) Montevideo", "Montevideo Standard Time", "Montevideo Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2014, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 10, 1, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 2, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2015, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2015, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Thursday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 2, DayOfWeek.Sunday)),
      }, false) },
      { "Magallanes Standard Time", TimeZoneInfo.CreateCustomTimeZone("Magallanes Standard Time", TimeSpan.FromSeconds(-10800), "(UTC-03:00) Punta Arenas", "Magallanes Standard Time", "Magallanes Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2007, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 10, 2, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 3, 2, DayOfWeek.Saturday), TimeSpan.FromSeconds(-3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2008, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2008, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 10, 2, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Saturday), TimeSpan.FromSeconds(-3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2009, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2009, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 10, 2, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 3, 2, DayOfWeek.Saturday), TimeSpan.FromSeconds(-3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2010, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2010, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 10, 2, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 4, 1, DayOfWeek.Saturday), TimeSpan.FromSeconds(-3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2011, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2011, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 8, 3, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 5, 1, DayOfWeek.Saturday), TimeSpan.FromSeconds(-3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2012, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2012, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 9, 1, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 4, 5, DayOfWeek.Saturday), TimeSpan.FromSeconds(-3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2013, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2013, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 9, 1, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 4, 5, DayOfWeek.Saturday), TimeSpan.FromSeconds(-3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2014, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2014, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 9, 1, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 4, 5, DayOfWeek.Saturday), TimeSpan.FromSeconds(-3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2016, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2016, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 8, 2, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 5, 2, DayOfWeek.Saturday), TimeSpan.FromSeconds(-3600)),
      }, false) },
      { "Saint Pierre Standard Time", TimeZoneInfo.CreateCustomTimeZone("Saint Pierre Standard Time", TimeSpan.FromSeconds(-10800), "(UTC-03:00) Saint Pierre and Miquelon", "Saint Pierre Standard Time", "Saint Pierre Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2006, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 4, 1, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2007, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(9999, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 2, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 11, 1, DayOfWeek.Sunday)),
      }, false) },
      { "Bahia Standard Time", TimeZoneInfo.CreateCustomTimeZone("Bahia Standard Time", TimeSpan.FromSeconds(-10800), "(UTC-03:00) Salvador", "Bahia Standard Time", "Bahia Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2011, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2011, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 10, 3, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2012, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2012, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 2, 4, DayOfWeek.Saturday)),
      }, false) },
      { "UTC-02", TimeZoneInfo.CreateCustomTimeZone("UTC-02", TimeSpan.FromSeconds(-7200), "(UTC-02:00) Coordinated Universal Time-02", "UTC-02", "UTC-02", new AdjustmentRule [] {
      }, true) },
      { "Mid-Atlantic Standard Time", TimeZoneInfo.CreateCustomTimeZone("Mid-Atlantic Standard Time", TimeSpan.FromSeconds(-7200), "(UTC-02:00) Mid-Atlantic - Old", "Mid-Atlantic Standard Time", "Mid-Atlantic Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(9999, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 9, 5, DayOfWeek.Sunday)),
      }, false) },
      { "Azores Standard Time", TimeZoneInfo.CreateCustomTimeZone("Azores Standard Time", TimeSpan.FromSeconds(-3600), "(UTC-01:00) Azores", "Azores Standard Time", "Azores Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(9999, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 1, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday)),
      }, false) },
      { "Cape Verde Standard Time", TimeZoneInfo.CreateCustomTimeZone("Cape Verde Standard Time", TimeSpan.FromSeconds(-3600), "(UTC-01:00) Cabo Verde Is.", "Cabo Verde Standard Time", "Cabo Verde Daylight Time", new AdjustmentRule [] {
      }, true) },
      { "UTC", TimeZoneInfo.CreateCustomTimeZone("UTC", TimeSpan.FromSeconds(0), "(UTC) Coordinated Universal Time", "Coordinated Universal Time", "Coordinated Universal Time", new AdjustmentRule [] {
      }, true) },
      { "GMT Standard Time", TimeZoneInfo.CreateCustomTimeZone("GMT Standard Time", TimeSpan.FromSeconds(0), "(UTC+00:00) Dublin, Edinburgh, Lisbon, London", "GMT Standard Time", "GMT Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(9999, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 1, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday)),
      }, false) },
      { "Greenwich Standard Time", TimeZoneInfo.CreateCustomTimeZone("Greenwich Standard Time", TimeSpan.FromSeconds(0), "(UTC+00:00) Monrovia, Reykjavik", "Greenwich Standard Time", "Greenwich Daylight Time", new AdjustmentRule [] {
      }, true) },
      { "Sao Tome Standard Time", TimeZoneInfo.CreateCustomTimeZone("Sao Tome Standard Time", TimeSpan.FromSeconds(0), "(UTC+00:00) Sao Tome", "Sao Tome Standard Time", "Sao Tome Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2018, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2018, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(-3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Monday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 1, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Monday), TimeSpan.FromSeconds(3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2019, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2019, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Tuesday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Tuesday)),
      }, false) },
      { "Morocco Standard Time", TimeZoneInfo.CreateCustomTimeZone("Morocco Standard Time", TimeSpan.FromSeconds(0), "(UTC+01:00) Casablanca", "Morocco Standard Time", "Morocco Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2008, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2008, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 5, 5, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 8, 5, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2009, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2009, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 5, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 8, 3, DayOfWeek.Thursday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2010, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2010, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 5, 1, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 8, 1, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2011, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2011, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 4, 1, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 7, 5, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2012, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2012, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 4, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 9, 5, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2013, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2013, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 4, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2014, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2014, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2015, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2015, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2016, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2016, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2017, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2017, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2018, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2018, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 4, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 10, 4, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2019, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2019, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 6, 2, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Tuesday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2020, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2020, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 5, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 4, 3, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2021, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2021, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 5, 3, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 4, 2, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2022, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2022, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 5, 2, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2023, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2023, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 4, 4, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 3, 3, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2024, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2024, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 4, 2, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 3, 2, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2025, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2025, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 4, 1, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 2, 5, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2026, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2026, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 4, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 2, 3, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2027, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2027, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 2, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 2, 1, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2028, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2028, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 1, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 1, 4, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2029, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(9999, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 2, 3, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 1, 2, DayOfWeek.Sunday)),
      }, false) },
      { "W. Europe Standard Time", TimeZoneInfo.CreateCustomTimeZone("W. Europe Standard Time", TimeSpan.FromSeconds(3600), "(UTC+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna", "W. Europe Standard Time", "W. Europe Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(9999, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday)),
      }, false) },
      { "Central Europe Standard Time", TimeZoneInfo.CreateCustomTimeZone("Central Europe Standard Time", TimeSpan.FromSeconds(3600), "(UTC+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague", "Central Europe Standard Time", "Central Europe Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(9999, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday)),
      }, false) },
      { "Romance Standard Time", TimeZoneInfo.CreateCustomTimeZone("Romance Standard Time", TimeSpan.FromSeconds(3600), "(UTC+01:00) Brussels, Copenhagen, Madrid, Paris", "Romance Standard Time", "Romance Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(9999, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday)),
      }, false) },
      { "Central European Standard Time", TimeZoneInfo.CreateCustomTimeZone("Central European Standard Time", TimeSpan.FromSeconds(3600), "(UTC+01:00) Sarajevo, Skopje, Warsaw, Zagreb", "Central European Standard Time", "Central European Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(9999, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday)),
      }, false) },
      { "W. Central Africa Standard Time", TimeZoneInfo.CreateCustomTimeZone("W. Central Africa Standard Time", TimeSpan.FromSeconds(3600), "(UTC+01:00) West Central Africa", "W. Central Africa Standard Time", "W. Central Africa Daylight Time", new AdjustmentRule [] {
      }, true) },
      { "Jordan Standard Time", TimeZoneInfo.CreateCustomTimeZone("Jordan Standard Time", TimeSpan.FromSeconds(7200), "(UTC+02:00) Amman", "Jordan Standard Time", "Jordan Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2011, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Thursday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 1, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Friday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2012, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2012, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Thursday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2013, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2013, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Tuesday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 12, 3, DayOfWeek.Friday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2014, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(9999, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Thursday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 1, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Friday)),
      }, false) },
      { "GTB Standard Time", TimeZoneInfo.CreateCustomTimeZone("GTB Standard Time", TimeSpan.FromSeconds(7200), "(UTC+02:00) Athens, Bucharest", "GTB Standard Time", "GTB Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(9999, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 4, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday)),
      }, false) },
      { "Middle East Standard Time", TimeZoneInfo.CreateCustomTimeZone("Middle East Standard Time", TimeSpan.FromSeconds(7200), "(UTC+02:00) Beirut", "Middle East Standard Time", "Middle East Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2009, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2010, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2010, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2011, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2011, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2012, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2012, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 3, 4, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2013, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2013, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2014, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2014, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2015, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2015, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 10, 4, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2016, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2016, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2017, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2017, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2018, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2018, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 3, 4, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2019, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2019, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2020, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2020, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 10, 4, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2021, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(9999, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Saturday)),
      }, false) },
      { "Egypt Standard Time", TimeZoneInfo.CreateCustomTimeZone("Egypt Standard Time", TimeSpan.FromSeconds(7200), "(UTC+02:00) Cairo", "Egypt Standard Time", "Egypt Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2005, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 4, 5, DayOfWeek.Friday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 9, 5, DayOfWeek.Thursday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2006, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2006, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 4, 5, DayOfWeek.Friday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 9, 3, DayOfWeek.Thursday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2007, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2007, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 4, 5, DayOfWeek.Thursday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 9, 1, DayOfWeek.Thursday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2008, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2008, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 4, 5, DayOfWeek.Thursday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 8, 5, DayOfWeek.Thursday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2009, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2009, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 4, 4, DayOfWeek.Thursday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 8, 3, DayOfWeek.Thursday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2010, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2010, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 4, 5, DayOfWeek.Thursday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 9, 5, DayOfWeek.Thursday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2014, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2014, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 5, 3, DayOfWeek.Thursday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 9, 5, DayOfWeek.Thursday)),
      }, false) },
      { "E. Europe Standard Time", TimeZoneInfo.CreateCustomTimeZone("E. Europe Standard Time", TimeSpan.FromSeconds(7200), "(UTC+02:00) Chisinau", "E. Europe Standard Time", "E. Europe Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(9999, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday)),
      }, false) },
      { "Syria Standard Time", TimeZoneInfo.CreateCustomTimeZone("Syria Standard Time", TimeSpan.FromSeconds(7200), "(UTC+02:00) Damascus", "Syria Standard Time", "Syria Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2004, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 4, 1, DayOfWeek.Thursday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 9, 5, DayOfWeek.Thursday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2005, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2005, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 4, 1, DayOfWeek.Friday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 9, 5, DayOfWeek.Friday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2006, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2006, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 4, 1, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 9, 3, DayOfWeek.Thursday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2007, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2007, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Friday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 11, 1, DayOfWeek.Thursday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2008, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2008, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 4, 1, DayOfWeek.Friday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Friday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2009, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2009, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Friday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Thursday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2010, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2010, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 4, 1, DayOfWeek.Friday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Thursday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2011, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2011, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 4, 1, DayOfWeek.Friday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Thursday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2012, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2012, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Friday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Thursday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2013, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2013, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Friday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 10, 4, DayOfWeek.Thursday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2014, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2014, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Friday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Thursday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2015, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2015, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Friday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Thursday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2016, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2016, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Friday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Thursday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2017, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2017, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Friday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Thursday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2018, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2018, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Friday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Thursday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2019, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2019, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Friday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 10, 4, DayOfWeek.Thursday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2020, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(9999, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Friday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Thursday)),
      }, false) },
      { "West Bank Standard Time", TimeZoneInfo.CreateCustomTimeZone("West Bank Standard Time", TimeSpan.FromSeconds(7200), "(UTC+02:00) Gaza, Hebron", "West Bank Gaza Standard Time", "West Bank Gaza Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2012, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Thursday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 1, 0, 0, DateTimeKind.Unspecified), 9, 3, DayOfWeek.Friday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2013, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2013, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Thursday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 9, 5, DayOfWeek.Thursday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2014, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2014, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Thursday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 10, 4, DayOfWeek.Thursday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2015, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2015, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 1, 0, 0, DateTimeKind.Unspecified), 10, 4, DayOfWeek.Friday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2016, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2016, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 1, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 1, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2017, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2017, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 1, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 1, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2018, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2018, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 1, 0, 0, DateTimeKind.Unspecified), 3, 4, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 1, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2019, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2019, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Friday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 10, 4, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2020, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2020, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 3, 4, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 1, 0, 0, DateTimeKind.Unspecified), 10, 4, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2021, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2021, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 1, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2022, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2022, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 1, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2023, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2023, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 1, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2024, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2024, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 1, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2025, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2025, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 1, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2026, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2026, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 1, 0, 0, DateTimeKind.Unspecified), 10, 4, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2027, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2027, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 1, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2028, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2028, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 1, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2029, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2029, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 3, 4, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 1, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2030, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(9999, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 1, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Saturday)),
      }, false) },
      { "South Africa Standard Time", TimeZoneInfo.CreateCustomTimeZone("South Africa Standard Time", TimeSpan.FromSeconds(7200), "(UTC+02:00) Harare, Pretoria", "South Africa Standard Time", "South Africa Daylight Time", new AdjustmentRule [] {
      }, true) },
      { "FLE Standard Time", TimeZoneInfo.CreateCustomTimeZone("FLE Standard Time", TimeSpan.FromSeconds(7200), "(UTC+02:00) Helsinki, Kyiv, Riga, Sofia, Tallinn, Vilnius", "FLE Standard Time", "FLE Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(9999, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 4, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday)),
      }, false) },
      { "Israel Standard Time", TimeZoneInfo.CreateCustomTimeZone("Israel Standard Time", TimeSpan.FromSeconds(7200), "(UTC+02:00) Jerusalem", "Jerusalem Standard Time", "Jerusalem Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2004, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 1, 0, 0, DateTimeKind.Unspecified), 4, 1, DayOfWeek.Wednesday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 1, 0, 0, DateTimeKind.Unspecified), 9, 4, DayOfWeek.Wednesday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2005, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2005, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 4, 1, DayOfWeek.Friday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 10, 2, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2006, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2006, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Friday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 10, 1, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2007, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2007, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Friday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 9, 3, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2008, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2008, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Friday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 10, 1, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2009, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2009, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Friday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 9, 5, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2010, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2010, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Friday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 9, 2, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2011, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2011, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 4, 1, DayOfWeek.Friday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 10, 1, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2012, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2012, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Friday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 9, 4, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2013, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2013, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Friday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2014, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2014, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Friday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2015, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2015, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Friday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2016, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2016, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Friday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2017, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2017, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 4, DayOfWeek.Friday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2018, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2018, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 4, DayOfWeek.Friday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2019, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2019, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Friday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2020, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2020, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Friday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2021, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2021, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Friday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2022, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2022, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Friday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2023, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(9999, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 4, DayOfWeek.Friday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday)),
      }, false) },
      { "South Sudan Standard Time", TimeZoneInfo.CreateCustomTimeZone("South Sudan Standard Time", TimeSpan.FromSeconds(7200), "(UTC+02:00) Juba", "South Sudan Standard Time", "South Sudan Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2020, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(0), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TimeSpan.FromSeconds(3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2021, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2021, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Friday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 1, 5, DayOfWeek.Sunday)),
      }, false) },
      { "Kaliningrad Standard Time", TimeZoneInfo.CreateCustomTimeZone("Kaliningrad Standard Time", TimeSpan.FromSeconds(7200), "(UTC+02:00) Kaliningrad", "Russia TZ 1 Standard Time", "Russia TZ 1 Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2010, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2011, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2011, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2012, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2012, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(0), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TimeSpan.FromSeconds(3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2013, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2013, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(0), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TimeSpan.FromSeconds(3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2014, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2014, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Wednesday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday)),
      }, false) },
      { "Sudan Standard Time", TimeZoneInfo.CreateCustomTimeZone("Sudan Standard Time", TimeSpan.FromSeconds(7200), "(UTC+02:00) Khartoum", "Sudan Standard Time", "Sudan Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2016, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(0), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TimeSpan.FromSeconds(3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2017, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2017, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Tuesday)),
      }, false) },
      { "Libya Standard Time", TimeZoneInfo.CreateCustomTimeZone("Libya Standard Time", TimeSpan.FromSeconds(7200), "(UTC+02:00) Tripoli", "Libya Standard Time", "Libya Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2012, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2012, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 11, 2, DayOfWeek.Saturday), TimeSpan.FromSeconds(-3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2013, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2013, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 1, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Friday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Tuesday), TimeSpan.FromSeconds(-3600)),
      }, false) },
      { "Namibia Standard Time", TimeZoneInfo.CreateCustomTimeZone("Namibia Standard Time", TimeSpan.FromSeconds(7200), "(UTC+02:00) Windhoek", "Namibia Standard Time", "Namibia Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2017, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 9, 1, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 4, 1, DayOfWeek.Sunday), TimeSpan.FromSeconds(-3600)),
      }, false) },
      { "Arabic Standard Time", TimeZoneInfo.CreateCustomTimeZone("Arabic Standard Time", TimeSpan.FromSeconds(10800), "(UTC+03:00) Baghdad", "Arabic Standard Time", "Arabic Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2004, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 4, 1, DayOfWeek.Thursday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 4, 0, 0, DateTimeKind.Unspecified), 10, 1, DayOfWeek.Friday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2005, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2005, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 4, 1, DayOfWeek.Friday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 4, 0, 0, DateTimeKind.Unspecified), 10, 1, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2006, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2006, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 4, 1, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 4, 0, 0, DateTimeKind.Unspecified), 10, 1, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2007, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2007, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 4, 1, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 4, 0, 0, DateTimeKind.Unspecified), 10, 1, DayOfWeek.Monday)),
      }, false) },
      { "Turkey Standard Time", TimeZoneInfo.CreateCustomTimeZone("Turkey Standard Time", TimeSpan.FromSeconds(10800), "(UTC+03:00) Istanbul", "Turkey Standard Time", "Turkey Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2010, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 4, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday), TimeSpan.FromSeconds(-3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2011, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2011, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Monday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 4, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday), TimeSpan.FromSeconds(-3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2012, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2012, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 4, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday), TimeSpan.FromSeconds(-3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2013, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2013, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 4, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday), TimeSpan.FromSeconds(-3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2014, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2014, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Monday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 4, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday), TimeSpan.FromSeconds(-3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2015, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2015, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 4, 0, 0, DateTimeKind.Unspecified), 11, 2, DayOfWeek.Sunday), TimeSpan.FromSeconds(-3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2016, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2016, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(-3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Friday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday)),
      }, false) },
      { "Arab Standard Time", TimeZoneInfo.CreateCustomTimeZone("Arab Standard Time", TimeSpan.FromSeconds(10800), "(UTC+03:00) Kuwait, Riyadh", "Arab Standard Time", "Arab Daylight Time", new AdjustmentRule [] {
      }, true) },
      { "Belarus Standard Time", TimeZoneInfo.CreateCustomTimeZone("Belarus Standard Time", TimeSpan.FromSeconds(10800), "(UTC+03:00) Minsk", "Belarus Standard Time", "Belarus Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2010, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday), TimeSpan.FromSeconds(-3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2011, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2011, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Saturday), TimeSpan.FromSeconds(-3600)),
      }, false) },
      { "Russian Standard Time", TimeZoneInfo.CreateCustomTimeZone("Russian Standard Time", TimeSpan.FromSeconds(10800), "(UTC+03:00) Moscow, St. Petersburg", "Russia TZ 2 Standard Time", "Russia TZ 2 Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2010, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2011, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2011, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2012, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2012, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(0), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TimeSpan.FromSeconds(3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2013, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2013, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(0), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TimeSpan.FromSeconds(3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2014, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2014, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Wednesday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday)),
      }, false) },
      { "E. Africa Standard Time", TimeZoneInfo.CreateCustomTimeZone("E. Africa Standard Time", TimeSpan.FromSeconds(10800), "(UTC+03:00) Nairobi", "E. Africa Standard Time", "E. Africa Daylight Time", new AdjustmentRule [] {
      }, true) },
      { "Volgograd Standard Time", TimeZoneInfo.CreateCustomTimeZone("Volgograd Standard Time", TimeSpan.FromSeconds(10800), "(UTC+03:00) Volgograd", "Volgograd Standard Time", "Volgograd Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2010, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2011, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2011, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2012, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2012, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(0), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TimeSpan.FromSeconds(3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2013, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2013, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(0), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TimeSpan.FromSeconds(3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2014, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2014, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Wednesday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2018, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2018, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(-3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Monday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday), TimeSpan.FromSeconds(3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2019, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2019, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(0), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TimeSpan.FromSeconds(3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2020, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2020, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Wednesday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 12, 5, DayOfWeek.Sunday), TimeSpan.FromSeconds(3600)),
      }, false) },
      { "Iran Standard Time", TimeZoneInfo.CreateCustomTimeZone("Iran Standard Time", TimeSpan.FromSeconds(12600), "(UTC+03:30) Tehran", "Iran Standard Time", "Iran Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2004, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 3, 3, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 9, 3, DayOfWeek.Monday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2005, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2005, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 3, 4, DayOfWeek.Tuesday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 9, 3, DayOfWeek.Wednesday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2008, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2008, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 3, 3, DayOfWeek.Friday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 9, 3, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2009, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2009, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 3, 4, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 9, 3, DayOfWeek.Monday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2010, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2010, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 3, 4, DayOfWeek.Monday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 9, 3, DayOfWeek.Tuesday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2011, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2011, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 3, 4, DayOfWeek.Tuesday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 9, 3, DayOfWeek.Wednesday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2012, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2012, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 3, 3, DayOfWeek.Wednesday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 9, 3, DayOfWeek.Thursday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2013, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2013, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 3, 4, DayOfWeek.Friday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 9, 3, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2014, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2014, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 3, 4, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 9, 3, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2015, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2015, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 3, 4, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 9, 3, DayOfWeek.Monday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2016, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2016, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 3, 3, DayOfWeek.Monday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 9, 3, DayOfWeek.Tuesday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2017, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2017, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 3, 4, DayOfWeek.Wednesday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 9, 3, DayOfWeek.Thursday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2018, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2018, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 3, 4, DayOfWeek.Thursday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 9, 3, DayOfWeek.Friday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2019, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2019, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 3, 4, DayOfWeek.Friday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 9, 3, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2020, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2020, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 3, 3, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 9, 3, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2021, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2021, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 3, 4, DayOfWeek.Monday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 9, 3, DayOfWeek.Tuesday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2022, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2022, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 3, 4, DayOfWeek.Tuesday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 9, 3, DayOfWeek.Wednesday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2023, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2023, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 3, 4, DayOfWeek.Wednesday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 9, 3, DayOfWeek.Thursday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2024, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(9999, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 3, 3, DayOfWeek.Thursday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 9, 3, DayOfWeek.Friday)),
      }, false) },
      { "Arabian Standard Time", TimeZoneInfo.CreateCustomTimeZone("Arabian Standard Time", TimeSpan.FromSeconds(14400), "(UTC+04:00) Abu Dhabi, Muscat", "Arabian Standard Time", "Arabian Daylight Time", new AdjustmentRule [] {
      }, true) },
      { "Astrakhan Standard Time", TimeZoneInfo.CreateCustomTimeZone("Astrakhan Standard Time", TimeSpan.FromSeconds(14400), "(UTC+04:00) Astrakhan, Ulyanovsk", "Astrakhan Standard Time", "Astrakhan Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2010, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday), TimeSpan.FromSeconds(-3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2011, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2011, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Saturday), TimeSpan.FromSeconds(-3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2014, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2014, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Wednesday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday), TimeSpan.FromSeconds(-3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2015, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2015, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(0), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TimeSpan.FromSeconds(-3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2016, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2016, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(-3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Friday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday)),
      }, false) },
      { "Azerbaijan Standard Time", TimeZoneInfo.CreateCustomTimeZone("Azerbaijan Standard Time", TimeSpan.FromSeconds(14400), "(UTC+04:00) Baku", "Azerbaijan Standard Time", "Azerbaijan Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2015, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 4, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 5, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday)),
      }, false) },
      { "Russia Time Zone 3", TimeZoneInfo.CreateCustomTimeZone("Russia Time Zone 3", TimeSpan.FromSeconds(14400), "(UTC+04:00) Izhevsk, Samara", "Russia TZ 3 Standard Time", "Russia TZ 3 Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2009, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2010, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2010, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Friday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday), TimeSpan.FromSeconds(-3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2011, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2011, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Saturday), TimeSpan.FromSeconds(-3600)),
      }, false) },
      { "Mauritius Standard Time", TimeZoneInfo.CreateCustomTimeZone("Mauritius Standard Time", TimeSpan.FromSeconds(14400), "(UTC+04:00) Port Louis", "Mauritius Standard Time", "Mauritius Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2008, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2008, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Tuesday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2009, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2009, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Thursday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday)),
      }, false) },
      { "Saratov Standard Time", TimeZoneInfo.CreateCustomTimeZone("Saratov Standard Time", TimeSpan.FromSeconds(14400), "(UTC+04:00) Saratov", "Saratov Standard Time", "Saratov Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2010, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday), TimeSpan.FromSeconds(-3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2011, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2011, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Saturday), TimeSpan.FromSeconds(-3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2014, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2014, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Wednesday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday), TimeSpan.FromSeconds(-3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2015, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2015, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(0), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TimeSpan.FromSeconds(-3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2016, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2016, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(-3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Friday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 12, 1, DayOfWeek.Sunday)),
      }, false) },
      { "Georgian Standard Time", TimeZoneInfo.CreateCustomTimeZone("Georgian Standard Time", TimeSpan.FromSeconds(14400), "(UTC+04:00) Tbilisi", "Georgian Standard Time", "Georgian Daylight Time", new AdjustmentRule [] {
      }, true) },
      { "Caucasus Standard Time", TimeZoneInfo.CreateCustomTimeZone("Caucasus Standard Time", TimeSpan.FromSeconds(14400), "(UTC+04:00) Yerevan", "Caucasus Standard Time", "Caucasus Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2011, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday)),
      }, false) },
      { "Afghanistan Standard Time", TimeZoneInfo.CreateCustomTimeZone("Afghanistan Standard Time", TimeSpan.FromSeconds(16200), "(UTC+04:30) Kabul", "Afghanistan Standard Time", "Afghanistan Daylight Time", new AdjustmentRule [] {
      }, true) },
      { "West Asia Standard Time", TimeZoneInfo.CreateCustomTimeZone("West Asia Standard Time", TimeSpan.FromSeconds(18000), "(UTC+05:00) Ashgabat, Tashkent", "West Asia Standard Time", "West Asia Daylight Time", new AdjustmentRule [] {
      }, true) },
      { "Ekaterinburg Standard Time", TimeZoneInfo.CreateCustomTimeZone("Ekaterinburg Standard Time", TimeSpan.FromSeconds(18000), "(UTC+05:00) Ekaterinburg", "Russia TZ 4 Standard Time", "Russia TZ 4 Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2010, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2011, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2011, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2012, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2012, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(0), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TimeSpan.FromSeconds(3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2013, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2013, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(0), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TimeSpan.FromSeconds(3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2014, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2014, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Wednesday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday)),
      }, false) },
      { "Pakistan Standard Time", TimeZoneInfo.CreateCustomTimeZone("Pakistan Standard Time", TimeSpan.FromSeconds(18000), "(UTC+05:00) Islamabad, Karachi", "Pakistan Standard Time", "Pakistan Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2008, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2008, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 5, 5, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Friday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2009, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2009, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 4, 2, DayOfWeek.Tuesday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Saturday)),
      }, false) },
      { "Qyzylorda Standard Time", TimeZoneInfo.CreateCustomTimeZone("Qyzylorda Standard Time", TimeSpan.FromSeconds(18000), "(UTC+05:00) Qyzylorda", "Qyzylorda Standard Time", "Qyzylorda Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2017, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(0), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TimeSpan.FromSeconds(3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2018, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2018, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Monday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 12, 3, DayOfWeek.Friday)),
      }, false) },
      { "India Standard Time", TimeZoneInfo.CreateCustomTimeZone("India Standard Time", TimeSpan.FromSeconds(19800), "(UTC+05:30) Chennai, Kolkata, Mumbai, New Delhi", "India Standard Time", "India Daylight Time", new AdjustmentRule [] {
      }, true) },
      { "Sri Lanka Standard Time", TimeZoneInfo.CreateCustomTimeZone("Sri Lanka Standard Time", TimeSpan.FromSeconds(19800), "(UTC+05:30) Sri Jayawardenepura", "Sri Lanka Standard Time", "Sri Lanka Daylight Time", new AdjustmentRule [] {
      }, true) },
      { "Nepal Standard Time", TimeZoneInfo.CreateCustomTimeZone("Nepal Standard Time", TimeSpan.FromSeconds(20700), "(UTC+05:45) Kathmandu", "Nepal Standard Time", "Nepal Daylight Time", new AdjustmentRule [] {
      }, true) },
      { "Central Asia Standard Time", TimeZoneInfo.CreateCustomTimeZone("Central Asia Standard Time", TimeSpan.FromSeconds(21600), "(UTC+06:00) Astana", "Central Asia Standard Time", "Central Asia Daylight Time", new AdjustmentRule [] {
      }, true) },
      { "Bangladesh Standard Time", TimeZoneInfo.CreateCustomTimeZone("Bangladesh Standard Time", TimeSpan.FromSeconds(21600), "(UTC+06:00) Dhaka", "Bangladesh Standard Time", "Bangladesh Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2009, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2009, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 0, 0, DateTimeKind.Unspecified), 6, 3, DayOfWeek.Friday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 12, 5, DayOfWeek.Thursday)),
      }, false) },
      { "Omsk Standard Time", TimeZoneInfo.CreateCustomTimeZone("Omsk Standard Time", TimeSpan.FromSeconds(21600), "(UTC+06:00) Omsk", "Omsk Standard Time", "Omsk Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2010, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2011, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2011, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2012, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2012, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(0), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TimeSpan.FromSeconds(3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2013, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2013, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(0), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TimeSpan.FromSeconds(3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2014, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2014, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Wednesday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday)),
      }, false) },
      { "Myanmar Standard Time", TimeZoneInfo.CreateCustomTimeZone("Myanmar Standard Time", TimeSpan.FromSeconds(23400), "(UTC+06:30) Yangon (Rangoon)", "Myanmar Standard Time", "Myanmar Daylight Time", new AdjustmentRule [] {
      }, true) },
      { "SE Asia Standard Time", TimeZoneInfo.CreateCustomTimeZone("SE Asia Standard Time", TimeSpan.FromSeconds(25200), "(UTC+07:00) Bangkok, Hanoi, Jakarta", "SE Asia Standard Time", "SE Asia Daylight Time", new AdjustmentRule [] {
      }, true) },
      { "Altai Standard Time", TimeZoneInfo.CreateCustomTimeZone("Altai Standard Time", TimeSpan.FromSeconds(25200), "(UTC+07:00) Barnaul, Gorno-Altaysk", "Altai Standard Time", "Altai Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2010, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday), TimeSpan.FromSeconds(-3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2011, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2011, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Saturday), TimeSpan.FromSeconds(-3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2014, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2014, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Wednesday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday), TimeSpan.FromSeconds(-3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2015, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2015, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(0), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TimeSpan.FromSeconds(-3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2016, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2016, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(-3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Friday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday)),
      }, false) },
      { "W. Mongolia Standard Time", TimeZoneInfo.CreateCustomTimeZone("W. Mongolia Standard Time", TimeSpan.FromSeconds(25200), "(UTC+07:00) Hovd", "W. Mongolia Standard Time", "W. Mongolia Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2006, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 9, 5, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2015, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2015, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 9, 5, DayOfWeek.Friday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2016, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2016, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 9, 4, DayOfWeek.Friday)),
      }, false) },
      { "North Asia Standard Time", TimeZoneInfo.CreateCustomTimeZone("North Asia Standard Time", TimeSpan.FromSeconds(25200), "(UTC+07:00) Krasnoyarsk", "Russia TZ 6 Standard Time", "Russia TZ 6 Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2010, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2011, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2011, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2012, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2012, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(0), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TimeSpan.FromSeconds(3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2013, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2013, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(0), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TimeSpan.FromSeconds(3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2014, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2014, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Wednesday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday)),
      }, false) },
      { "N. Central Asia Standard Time", TimeZoneInfo.CreateCustomTimeZone("N. Central Asia Standard Time", TimeSpan.FromSeconds(25200), "(UTC+07:00) Novosibirsk", "Novosibirsk Standard Time", "Novosibirsk Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2010, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday), TimeSpan.FromSeconds(-3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2011, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2011, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Saturday), TimeSpan.FromSeconds(-3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2014, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2014, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Wednesday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday), TimeSpan.FromSeconds(-3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2015, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2015, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(0), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TimeSpan.FromSeconds(-3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2016, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2016, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(-3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Friday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 7, 4, DayOfWeek.Sunday)),
      }, false) },
      { "Tomsk Standard Time", TimeZoneInfo.CreateCustomTimeZone("Tomsk Standard Time", TimeSpan.FromSeconds(25200), "(UTC+07:00) Tomsk", "Tomsk Standard Time", "Tomsk Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2010, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday), TimeSpan.FromSeconds(-3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2011, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2011, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Saturday), TimeSpan.FromSeconds(-3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2014, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2014, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Wednesday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday), TimeSpan.FromSeconds(-3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2015, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2015, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(0), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TimeSpan.FromSeconds(-3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2016, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2016, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(-3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Friday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 5, 5, DayOfWeek.Sunday)),
      }, false) },
      { "China Standard Time", TimeZoneInfo.CreateCustomTimeZone("China Standard Time", TimeSpan.FromSeconds(28800), "(UTC+08:00) Beijing, Chongqing, Hong Kong, Urumqi", "China Standard Time", "China Daylight Time", new AdjustmentRule [] {
      }, true) },
      { "North Asia East Standard Time", TimeZoneInfo.CreateCustomTimeZone("North Asia East Standard Time", TimeSpan.FromSeconds(28800), "(UTC+08:00) Irkutsk", "Russia TZ 7 Standard Time", "Russia TZ 7 Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2010, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2011, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2011, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2012, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2012, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(0), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TimeSpan.FromSeconds(3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2013, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2013, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(0), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TimeSpan.FromSeconds(3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2014, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2014, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Wednesday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday)),
      }, false) },
      { "Singapore Standard Time", TimeZoneInfo.CreateCustomTimeZone("Singapore Standard Time", TimeSpan.FromSeconds(28800), "(UTC+08:00) Kuala Lumpur, Singapore", "Malay Peninsula Standard Time", "Malay Peninsula Daylight Time", new AdjustmentRule [] {
      }, true) },
      { "W. Australia Standard Time", TimeZoneInfo.CreateCustomTimeZone("W. Australia Standard Time", TimeSpan.FromSeconds(28800), "(UTC+08:00) Perth", "W. Australia Standard Time", "W. Australia Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2006, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2006, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 12, 1, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2007, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2007, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2008, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2008, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2009, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2009, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Thursday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday)),
      }, false) },
      { "Taipei Standard Time", TimeZoneInfo.CreateCustomTimeZone("Taipei Standard Time", TimeSpan.FromSeconds(28800), "(UTC+08:00) Taipei", "Taipei Standard Time", "Taipei Daylight Time", new AdjustmentRule [] {
      }, true) },
      { "Ulaanbaatar Standard Time", TimeZoneInfo.CreateCustomTimeZone("Ulaanbaatar Standard Time", TimeSpan.FromSeconds(28800), "(UTC+08:00) Ulaanbaatar", "Ulaanbaatar Standard Time", "Ulaanbaatar Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2015, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2015, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 9, 5, DayOfWeek.Friday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2016, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2016, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 9, 4, DayOfWeek.Friday)),
      }, false) },
      { "Aus Central W. Standard Time", TimeZoneInfo.CreateCustomTimeZone("Aus Central W. Standard Time", TimeSpan.FromSeconds(31500), "(UTC+08:45) Eucla", "Aus Central W. Standard Time", "Aus Central W. Daylight Time", new AdjustmentRule [] {
      }, true) },
      { "Transbaikal Standard Time", TimeZoneInfo.CreateCustomTimeZone("Transbaikal Standard Time", TimeSpan.FromSeconds(32400), "(UTC+09:00) Chita", "Transbaikal Standard Time", "Transbaikal Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2010, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2011, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2011, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2012, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2012, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(0), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TimeSpan.FromSeconds(3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2013, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2013, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(0), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TimeSpan.FromSeconds(3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2014, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2014, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(7200), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Wednesday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday), TimeSpan.FromSeconds(-3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2015, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2015, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(0), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TimeSpan.FromSeconds(-3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2016, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2016, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(-3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Friday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday)),
      }, false) },
      { "Tokyo Standard Time", TimeZoneInfo.CreateCustomTimeZone("Tokyo Standard Time", TimeSpan.FromSeconds(32400), "(UTC+09:00) Osaka, Sapporo, Tokyo", "Tokyo Standard Time", "Tokyo Daylight Time", new AdjustmentRule [] {
      }, true) },
      { "North Korea Standard Time", TimeZoneInfo.CreateCustomTimeZone("North Korea Standard Time", TimeSpan.FromSeconds(32400), "(UTC+09:00) Pyongyang", "North Korea Standard Time", "North Korea Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2015, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2015, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(1800), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Thursday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 59, 59, DateTimeKind.Unspecified), 8, 2, DayOfWeek.Friday), TimeSpan.FromSeconds(-1800)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2016, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2016, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(0), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TimeSpan.FromSeconds(-1800)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2017, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2017, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(0), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TimeSpan.FromSeconds(-1800)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2018, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2018, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(-1800), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Monday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 23, 30, 0, DateTimeKind.Unspecified), 5, 1, DayOfWeek.Friday)),
      }, false) },
      { "Korea Standard Time", TimeZoneInfo.CreateCustomTimeZone("Korea Standard Time", TimeSpan.FromSeconds(32400), "(UTC+09:00) Seoul", "Korea Standard Time", "Korea Daylight Time", new AdjustmentRule [] {
      }, true) },
      { "Yakutsk Standard Time", TimeZoneInfo.CreateCustomTimeZone("Yakutsk Standard Time", TimeSpan.FromSeconds(32400), "(UTC+09:00) Yakutsk", "Russia TZ 8 Standard Time", "Russia TZ 8 Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2010, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2011, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2011, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2012, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2012, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(0), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TimeSpan.FromSeconds(3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2013, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2013, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(0), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TimeSpan.FromSeconds(3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2014, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2014, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Wednesday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday)),
      }, false) },
      { "Cen. Australia Standard Time", TimeZoneInfo.CreateCustomTimeZone("Cen. Australia Standard Time", TimeSpan.FromSeconds(34200), "(UTC+09:30) Adelaide", "Cen. Australia Standard Time", "Cen. Australia Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2007, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2008, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(9999, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 10, 1, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 4, 1, DayOfWeek.Sunday)),
      }, false) },
      { "AUS Central Standard Time", TimeZoneInfo.CreateCustomTimeZone("AUS Central Standard Time", TimeSpan.FromSeconds(34200), "(UTC+09:30) Darwin", "AUS Central Standard Time", "AUS Central Daylight Time", new AdjustmentRule [] {
      }, true) },
      { "E. Australia Standard Time", TimeZoneInfo.CreateCustomTimeZone("E. Australia Standard Time", TimeSpan.FromSeconds(36000), "(UTC+10:00) Brisbane", "E. Australia Standard Time", "E. Australia Daylight Time", new AdjustmentRule [] {
      }, true) },
      { "AUS Eastern Standard Time", TimeZoneInfo.CreateCustomTimeZone("AUS Eastern Standard Time", TimeSpan.FromSeconds(36000), "(UTC+10:00) Canberra, Melbourne, Sydney", "AUS Eastern Standard Time", "AUS Eastern Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2007, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2008, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(9999, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 10, 1, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 4, 1, DayOfWeek.Sunday)),
      }, false) },
      { "West Pacific Standard Time", TimeZoneInfo.CreateCustomTimeZone("West Pacific Standard Time", TimeSpan.FromSeconds(36000), "(UTC+10:00) Guam, Port Moresby", "West Pacific Standard Time", "West Pacific Daylight Time", new AdjustmentRule [] {
      }, true) },
      { "Tasmania Standard Time", TimeZoneInfo.CreateCustomTimeZone("Tasmania Standard Time", TimeSpan.FromSeconds(36000), "(UTC+10:00) Hobart", "Tasmania Standard Time", "Tasmania Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2007, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 10, 1, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2008, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(9999, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 10, 1, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 4, 1, DayOfWeek.Sunday)),
      }, false) },
      { "Vladivostok Standard Time", TimeZoneInfo.CreateCustomTimeZone("Vladivostok Standard Time", TimeSpan.FromSeconds(36000), "(UTC+10:00) Vladivostok", "Russia TZ 9 Standard Time", "Russia TZ 9 Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2010, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2011, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2011, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2012, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2012, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(0), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TimeSpan.FromSeconds(3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2013, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2013, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(0), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TimeSpan.FromSeconds(3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2014, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2014, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Wednesday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday)),
      }, false) },
      { "Lord Howe Standard Time", TimeZoneInfo.CreateCustomTimeZone("Lord Howe Standard Time", TimeSpan.FromSeconds(37800), "(UTC+10:30) Lord Howe Island", "Lord Howe Standard Time", "Lord Howe Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2005, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(1800), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2006, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2006, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(1800), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 4, 1, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2007, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2007, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(1800), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2008, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(9999, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(1800), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 10, 1, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 4, 1, DayOfWeek.Sunday)),
      }, false) },
      { "Bougainville Standard Time", TimeZoneInfo.CreateCustomTimeZone("Bougainville Standard Time", TimeSpan.FromSeconds(39600), "(UTC+11:00) Bougainville Island", "Bougainville Standard Time", "Bougainville Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2013, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(0), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TimeSpan.FromSeconds(-3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2014, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2014, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 12, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Wednesday), TimeSpan.FromSeconds(-3600)),
      }, false) },
      { "Russia Time Zone 10", TimeZoneInfo.CreateCustomTimeZone("Russia Time Zone 10", TimeSpan.FromSeconds(39600), "(UTC+11:00) Chokurdakh", "Russia TZ 10 Standard Time", "Russia TZ 10 Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2010, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2011, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2011, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2012, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2012, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(0), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TimeSpan.FromSeconds(3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2013, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2013, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(0), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TimeSpan.FromSeconds(3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2014, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2014, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Wednesday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday)),
      }, false) },
      { "Magadan Standard Time", TimeZoneInfo.CreateCustomTimeZone("Magadan Standard Time", TimeSpan.FromSeconds(39600), "(UTC+11:00) Magadan", "Magadan Standard Time", "Magadan Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2010, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2011, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2011, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Saturday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2012, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2012, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(0), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TimeSpan.FromSeconds(3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2013, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2013, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(0), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TimeSpan.FromSeconds(3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2014, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2014, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(7200), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Wednesday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday), TimeSpan.FromSeconds(-3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2015, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2015, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(0), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TimeSpan.FromSeconds(-3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2016, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2016, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(-3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Friday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 4, 5, DayOfWeek.Sunday)),
      }, false) },
      { "Norfolk Standard Time", TimeZoneInfo.CreateCustomTimeZone("Norfolk Standard Time", TimeSpan.FromSeconds(39600), "(UTC+11:00) Norfolk Island", "Norfolk Standard Time", "Norfolk Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2014, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(0), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TimeSpan.FromSeconds(1800)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2015, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2015, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(1800), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Thursday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 10, 1, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2019, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2019, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 10, 1, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Tuesday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2020, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(9999, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 10, 1, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 4, 1, DayOfWeek.Sunday)),
      }, false) },
      { "Sakhalin Standard Time", TimeZoneInfo.CreateCustomTimeZone("Sakhalin Standard Time", TimeSpan.FromSeconds(39600), "(UTC+11:00) Sakhalin", "Sakhalin Standard Time", "Sakhalin Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2010, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday), TimeSpan.FromSeconds(-3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2011, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2011, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Saturday), TimeSpan.FromSeconds(-3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2014, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2014, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Wednesday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday), TimeSpan.FromSeconds(-3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2015, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2015, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(0), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TimeSpan.FromSeconds(-3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2016, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2016, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(-3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Friday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday)),
      }, false) },
      { "Central Pacific Standard Time", TimeZoneInfo.CreateCustomTimeZone("Central Pacific Standard Time", TimeSpan.FromSeconds(39600), "(UTC+11:00) Solomon Is., New Caledonia", "Central Pacific Standard Time", "Central Pacific Daylight Time", new AdjustmentRule [] {
      }, true) },
      { "Russia Time Zone 11", TimeZoneInfo.CreateCustomTimeZone("Russia Time Zone 11", TimeSpan.FromSeconds(43200), "(UTC+12:00) Anadyr, Petropavlovsk-Kamchatsky", "Russia TZ 11 Standard Time", "Russia TZ 11 Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2009, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2010, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2010, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Friday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday), TimeSpan.FromSeconds(-3600)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2011, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2011, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Saturday), TimeSpan.FromSeconds(-3600)),
      }, false) },
      { "New Zealand Standard Time", TimeZoneInfo.CreateCustomTimeZone("New Zealand Standard Time", TimeSpan.FromSeconds(43200), "(UTC+12:00) Auckland, Wellington", "New Zealand Standard Time", "New Zealand Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2006, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 10, 1, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 3, 3, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2007, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2007, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 9, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 3, 3, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2008, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(9999, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 9, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 4, 1, DayOfWeek.Sunday)),
      }, false) },
      { "UTC+12", TimeZoneInfo.CreateCustomTimeZone("UTC+12", TimeSpan.FromSeconds(43200), "(UTC+12:00) Coordinated Universal Time+12", "UTC+12", "UTC+12", new AdjustmentRule [] {
      }, true) },
      { "Fiji Standard Time", TimeZoneInfo.CreateCustomTimeZone("Fiji Standard Time", TimeSpan.FromSeconds(43200), "(UTC+12:00) Fiji", "Fiji Standard Time", "Fiji Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2009, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2009, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 11, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Thursday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2010, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2010, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 10, 4, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2011, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2011, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 10, 4, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 3, 1, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2012, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2012, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 10, 3, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 1, 4, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2013, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2013, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 10, 4, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 1, 3, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2014, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2014, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 11, 1, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 1, 3, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2015, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2015, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 11, 1, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 1, 3, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2016, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2016, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 11, 1, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 1, 3, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2017, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2017, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 11, 1, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 1, 3, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2018, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2018, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 11, 1, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 1, 2, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2019, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2019, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 11, 2, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 1, 2, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2020, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2020, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 12, 3, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 1, 2, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2021, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2021, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 11, 2, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 1, 3, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2022, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2022, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 11, 2, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 1, 3, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2023, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2023, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 11, 2, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 1, 3, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2024, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2024, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 11, 2, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 1, 2, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2025, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2025, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 11, 2, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 1, 2, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2026, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2026, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 11, 2, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 1, 3, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2027, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2027, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 11, 2, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 1, 3, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2028, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2028, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 11, 2, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 1, 3, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2029, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(9999, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 11, 2, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 1, 2, DayOfWeek.Sunday)),
      }, false) },
      { "Kamchatka Standard Time", TimeZoneInfo.CreateCustomTimeZone("Kamchatka Standard Time", TimeSpan.FromSeconds(43200), "(UTC+12:00) Petropavlovsk-Kamchatsky - Old", "Kamchatka Standard Time", "Kamchatka Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(9999, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 3, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 10, 5, DayOfWeek.Sunday)),
      }, false) },
      { "Chatham Islands Standard Time", TimeZoneInfo.CreateCustomTimeZone("Chatham Islands Standard Time", TimeSpan.FromSeconds(45900), "(UTC+12:45) Chatham Islands", "Chatham Islands Standard Time", "Chatham Islands Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2006, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 45, 0, DateTimeKind.Unspecified), 10, 1, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 45, 0, DateTimeKind.Unspecified), 3, 3, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2007, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2007, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 45, 0, DateTimeKind.Unspecified), 9, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 45, 0, DateTimeKind.Unspecified), 3, 3, DayOfWeek.Sunday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2008, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(9999, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 45, 0, DateTimeKind.Unspecified), 9, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 45, 0, DateTimeKind.Unspecified), 4, 1, DayOfWeek.Sunday)),
      }, false) },
      { "UTC+13", TimeZoneInfo.CreateCustomTimeZone("UTC+13", TimeSpan.FromSeconds(46800), "(UTC+13:00) Coordinated Universal Time+13", "UTC+13", "UTC+13", new AdjustmentRule [] {
      }, true) },
      { "Tonga Standard Time", TimeZoneInfo.CreateCustomTimeZone("Tonga Standard Time", TimeSpan.FromSeconds(46800), "(UTC+13:00) Nuku'alofa", "Tonga Standard Time", "Tonga Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2016, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2016, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 2, 0, 0, DateTimeKind.Unspecified), 11, 1, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Friday)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2017, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2017, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 1, 3, DayOfWeek.Sunday)),
      }, false) },
      { "Samoa Standard Time", TimeZoneInfo.CreateCustomTimeZone("Samoa Standard Time", TimeSpan.FromSeconds(46800), "(UTC+13:00) Samoa", "Samoa Standard Time", "Samoa Daylight Time", new AdjustmentRule [] {
    AdjustmentRule.CreateAdjustmentRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2009, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(0), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TransitionTime.CreateFixedDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1), TimeSpan.FromSeconds(-86400)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2010, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2010, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 9, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), 1, 1, DayOfWeek.Friday), TimeSpan.FromSeconds(-86400)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2011, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(2011, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 9, 4, DayOfWeek.Saturday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 4, 0, 0, DateTimeKind.Unspecified), 4, 1, DayOfWeek.Saturday), TimeSpan.FromSeconds(-86400)),
    AdjustmentRule.CreateAdjustmentRule(new DateTime(2012, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new DateTime(9999, 12, 31, 0, 0, 0, DateTimeKind.Unspecified), TimeSpan.FromSeconds(3600), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 3, 0, 0, DateTimeKind.Unspecified), 9, 5, DayOfWeek.Sunday), TransitionTime.CreateFloatingDateRule(new DateTime(0001, 1, 1, 4, 0, 0, DateTimeKind.Unspecified), 4, 1, DayOfWeek.Sunday)),
      }, false) },
      { "Line Islands Standard Time", TimeZoneInfo.CreateCustomTimeZone("Line Islands Standard Time", TimeSpan.FromSeconds(50400), "(UTC+14:00) Kiritimati Island", "Line Islands Standard Time", "Line Islands Daylight Time", new AdjustmentRule [] {
      }, true) },
    };

    private static Dictionary<string, string> _standardNames = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase)
    {

      {"Dateline Standard Time", "Dateline Standard Time" },
      {"UTC-11", "UTC-11" },
      {"Aleutian Standard Time", "Aleutian Standard Time" },
      {"Hawaiian Standard Time", "Hawaiian Standard Time" },
      {"Marquesas Standard Time", "Marquesas Standard Time" },
      {"Alaskan Standard Time", "Alaskan Standard Time" },
      {"UTC-09", "UTC-09" },
      {"Pacific Standard Time (Mexico)", "Pacific Standard Time (Mexico)" },
      {"UTC-08", "UTC-08" },
      {"Pacific Standard Time", "Pacific Standard Time" },
      {"US Mountain Standard Time", "US Mountain Standard Time" },
      {"Mountain Standard Time (Mexico)", "Mountain Standard Time (Mexico)" },
      {"Mountain Standard Time", "Mountain Standard Time" },
      {"Yukon Standard Time", "Yukon Standard Time" },
      {"Central America Standard Time", "Central America Standard Time" },
      {"Central Standard Time", "Central Standard Time" },
      {"Easter Island Standard Time", "Easter Island Standard Time" },
      {"Central Standard Time (Mexico)", "Central Standard Time (Mexico)" },
      {"Canada Central Standard Time", "Canada Central Standard Time" },
      {"SA Pacific Standard Time", "SA Pacific Standard Time" },
      {"Eastern Standard Time (Mexico)", "Eastern Standard Time (Mexico)" },
      {"Eastern Standard Time", "Eastern Standard Time" },
      {"Haiti Standard Time", "Haiti Standard Time" },
      {"Cuba Standard Time", "Cuba Standard Time" },
      {"US Eastern Standard Time", "US Eastern Standard Time" },
      {"Turks and Caicos Standard Time", "Turks And Caicos Standard Time" },
      {"Paraguay Standard Time", "Paraguay Standard Time" },
      {"Atlantic Standard Time", "Atlantic Standard Time" },
      {"Venezuela Standard Time", "Venezuela Standard Time" },
      {"Central Brazilian Standard Time", "Central Brazilian Standard Time" },
      {"SA Western Standard Time", "SA Western Standard Time" },
      {"Pacific SA Standard Time", "Pacific SA Standard Time" },
      {"Newfoundland Standard Time", "Newfoundland Standard Time" },
      {"Tocantins Standard Time", "Tocantins Standard Time" },
      {"E. South America Standard Time", "E. South America Standard Time" },
      {"SA Eastern Standard Time", "SA Eastern Standard Time" },
      {"Argentina Standard Time", "Argentina Standard Time" },
      {"Greenland Standard Time", "Greenland Standard Time" },
      {"Montevideo Standard Time", "Montevideo Standard Time" },
      {"Magallanes Standard Time", "Magallanes Standard Time" },
      {"Saint Pierre Standard Time", "Saint Pierre Standard Time" },
      {"Bahia Standard Time", "Bahia Standard Time" },
      {"UTC-02", "UTC-02" },
      {"Mid-Atlantic Standard Time", "Mid-Atlantic Standard Time" },
      {"Azores Standard Time", "Azores Standard Time" },
      {"Cabo Verde Standard Time", "Cape Verde Standard Time" },
      {"Coordinated Universal Time", "UTC" },
      {"GMT Standard Time", "GMT Standard Time" },
      {"Greenwich Standard Time", "Greenwich Standard Time" },
      {"Sao Tome Standard Time", "Sao Tome Standard Time" },
      {"Morocco Standard Time", "Morocco Standard Time" },
      {"W. Europe Standard Time", "W. Europe Standard Time" },
      {"Central Europe Standard Time", "Central Europe Standard Time" },
      {"Romance Standard Time", "Romance Standard Time" },
      {"Central European Standard Time", "Central European Standard Time" },
      {"W. Central Africa Standard Time", "W. Central Africa Standard Time" },
      {"Jordan Standard Time", "Jordan Standard Time" },
      {"GTB Standard Time", "GTB Standard Time" },
      {"Middle East Standard Time", "Middle East Standard Time" },
      {"Egypt Standard Time", "Egypt Standard Time" },
      {"E. Europe Standard Time", "E. Europe Standard Time" },
      {"Syria Standard Time", "Syria Standard Time" },
      {"West Bank Gaza Standard Time", "West Bank Standard Time" },
      {"South Africa Standard Time", "South Africa Standard Time" },
      {"FLE Standard Time", "FLE Standard Time" },
      {"Jerusalem Standard Time", "Israel Standard Time" },
      {"South Sudan Standard Time", "South Sudan Standard Time" },
      {"Russia TZ 1 Standard Time", "Kaliningrad Standard Time" },
      {"Sudan Standard Time", "Sudan Standard Time" },
      {"Libya Standard Time", "Libya Standard Time" },
      {"Namibia Standard Time", "Namibia Standard Time" },
      {"Arabic Standard Time", "Arabic Standard Time" },
      {"Turkey Standard Time", "Turkey Standard Time" },
      {"Arab Standard Time", "Arab Standard Time" },
      {"Belarus Standard Time", "Belarus Standard Time" },
      {"Russia TZ 2 Standard Time", "Russian Standard Time" },
      {"E. Africa Standard Time", "E. Africa Standard Time" },
      {"Volgograd Standard Time", "Volgograd Standard Time" },
      {"Iran Standard Time", "Iran Standard Time" },
      {"Arabian Standard Time", "Arabian Standard Time" },
      {"Astrakhan Standard Time", "Astrakhan Standard Time" },
      {"Azerbaijan Standard Time", "Azerbaijan Standard Time" },
      {"Russia TZ 3 Standard Time", "Russia Time Zone 3" },
      {"Mauritius Standard Time", "Mauritius Standard Time" },
      {"Saratov Standard Time", "Saratov Standard Time" },
      {"Georgian Standard Time", "Georgian Standard Time" },
      {"Caucasus Standard Time", "Caucasus Standard Time" },
      {"Afghanistan Standard Time", "Afghanistan Standard Time" },
      {"West Asia Standard Time", "West Asia Standard Time" },
      {"Russia TZ 4 Standard Time", "Ekaterinburg Standard Time" },
      {"Pakistan Standard Time", "Pakistan Standard Time" },
      {"Qyzylorda Standard Time", "Qyzylorda Standard Time" },
      {"India Standard Time", "India Standard Time" },
      {"Sri Lanka Standard Time", "Sri Lanka Standard Time" },
      {"Nepal Standard Time", "Nepal Standard Time" },
      {"Central Asia Standard Time", "Central Asia Standard Time" },
      {"Bangladesh Standard Time", "Bangladesh Standard Time" },
      {"Omsk Standard Time", "Omsk Standard Time" },
      {"Myanmar Standard Time", "Myanmar Standard Time" },
      {"SE Asia Standard Time", "SE Asia Standard Time" },
      {"Altai Standard Time", "Altai Standard Time" },
      {"W. Mongolia Standard Time", "W. Mongolia Standard Time" },
      {"Russia TZ 6 Standard Time", "North Asia Standard Time" },
      {"Novosibirsk Standard Time", "N. Central Asia Standard Time" },
      {"Tomsk Standard Time", "Tomsk Standard Time" },
      {"China Standard Time", "China Standard Time" },
      {"Russia TZ 7 Standard Time", "North Asia East Standard Time" },
      {"Malay Peninsula Standard Time", "Singapore Standard Time" },
      {"W. Australia Standard Time", "W. Australia Standard Time" },
      {"Taipei Standard Time", "Taipei Standard Time" },
      {"Ulaanbaatar Standard Time", "Ulaanbaatar Standard Time" },
      {"Aus Central W. Standard Time", "Aus Central W. Standard Time" },
      {"Transbaikal Standard Time", "Transbaikal Standard Time" },
      {"Tokyo Standard Time", "Tokyo Standard Time" },
      {"North Korea Standard Time", "North Korea Standard Time" },
      {"Korea Standard Time", "Korea Standard Time" },
      {"Russia TZ 8 Standard Time", "Yakutsk Standard Time" },
      {"Cen. Australia Standard Time", "Cen. Australia Standard Time" },
      {"AUS Central Standard Time", "AUS Central Standard Time" },
      {"E. Australia Standard Time", "E. Australia Standard Time" },
      {"AUS Eastern Standard Time", "AUS Eastern Standard Time" },
      {"West Pacific Standard Time", "West Pacific Standard Time" },
      {"Tasmania Standard Time", "Tasmania Standard Time" },
      {"Russia TZ 9 Standard Time", "Vladivostok Standard Time" },
      {"Lord Howe Standard Time", "Lord Howe Standard Time" },
      {"Bougainville Standard Time", "Bougainville Standard Time" },
      {"Russia TZ 10 Standard Time", "Russia Time Zone 10" },
      {"Magadan Standard Time", "Magadan Standard Time" },
      {"Norfolk Standard Time", "Norfolk Standard Time" },
      {"Sakhalin Standard Time", "Sakhalin Standard Time" },
      {"Central Pacific Standard Time", "Central Pacific Standard Time" },
      {"Russia TZ 11 Standard Time", "Russia Time Zone 11" },
      {"New Zealand Standard Time", "New Zealand Standard Time" },
      {"UTC+12", "UTC+12" },
      {"Fiji Standard Time", "Fiji Standard Time" },
      {"Kamchatka Standard Time", "Kamchatka Standard Time" },
      {"Chatham Islands Standard Time", "Chatham Islands Standard Time" },
      {"UTC+13", "UTC+13" },
      {"Tonga Standard Time", "Tonga Standard Time" },
      {"Samoa Standard Time", "Samoa Standard Time" },
      {"Line Islands Standard Time", "Line Islands Standard Time" },
    };
  }
}
#endif
